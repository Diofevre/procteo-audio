"""
Application Streamlit VAD pour Procteo-Audio.
Interface pour l'analyse Voice Activity Detection avec Pyannote.
Interface compl√®te avec diagnostic de sant√© et gestion d'erreurs robuste.
"""

import streamlit as st
import os
import platform
from pathlib import Path
import tempfile
import json
from loguru import logger

# Import des modules VAD
from src.audio.pipeline.vad_processor import VADProcessor
from src.audio.utils.token_manager import TokenManager

st.set_page_config(
    page_title="Procteo-Audio - VAD",
    page_icon="üéµ",
    layout="wide"
)

st.title("üéµ Procteo-Audio - Voice Activity Detection")
st.markdown("---")

# Initialisation de la session
if 'vad_processor' not in st.session_state:
    st.session_state.vad_processor = None

if 'health_status' not in st.session_state:
    st.session_state.health_status = None

# Sidebar pour la configuration
with st.sidebar:
    st.header("‚öôÔ∏è Configuration")
    
    # V√©rification de la sant√© du syst√®me
    st.subheader("üîç Sant√© du syst√®me")
    
    # V√©rification compl√®te de la sant√©
    if st.button("üîç V√©rifier la sant√© du syst√®me", type="primary"):
        # Cr√©er un statut de sant√© local
        token_manager = TokenManager()
        token_status = token_manager.get_token_status()
        
        # V√©rifier l'acc√®s au mod√®le si on a un token
        model_access = None
        if token_status["available"]:
            model_access = token_manager.check_model_access(
                "pyannote/voice-activity-detection", 
                token_status.get("token", "")
            )
        
        st.session_state.health_status = {
            "token_available": token_status["available"],
            "token_source": token_status["source"],
            "model_accessible": model_access["success"] if model_access else False,
            "model_details": model_access.get("details", "") if model_access else "",
            "device": TokenManager.get_torch_device(),
            "timestamp": "maintenant"
        }
        st.rerun()
    
    if st.session_state.health_status:
        health = st.session_state.health_status
        
        # Statut du token
        if health["token_available"]:
            st.success(f"‚úÖ Token HF d√©tect√© ({health['token_source']})")
        else:
            st.error("‚ùå Token HF manquant")
            st.info("Configurez HF_TOKEN dans .streamlit/secrets.toml")
        
        # Statut du mod√®le
        if health["model_accessible"]:
            st.success("‚úÖ Mod√®le accessible")
        else:
            st.warning("‚ö†Ô∏è Mod√®le non accessible")
            if health["model_details"]:
                st.info(f"D√©tails: {health['model_details']}")
        
        # Device
        st.info(f"üñ•Ô∏è Device: {health['device']}")
        
        st.markdown("---")
    
    # Initialisation du processeur VAD
    st.subheader("üöÄ Initialisation VAD")
    
    if st.button("üîß Initialiser le processeur VAD", type="secondary"):
        try:
            with st.spinner("Initialisation en cours..."):
                vad = VADProcessor()
                init_result = vad.initialize_pipeline()
                
                if init_result["success"]:
                    st.session_state.vad_processor = vad
                    st.success("‚úÖ Processeur VAD initialis√© avec succ√®s!")
                    st.rerun()
                else:
                    st.error(f"‚ùå √âchec de l'initialisation: {init_result['message']}")
                    if "details" in init_result:
                        st.error(f"D√©tails: {init_result['details']}")
        except Exception as e:
            st.error(f"‚ùå Erreur lors de l'initialisation: {str(e)}")
    
    # Statut du processeur
    if st.session_state.vad_processor:
        st.success("‚úÖ Processeur VAD pr√™t")
        
        # Afficher les informations du processeur
        health_info = st.session_state.vad_processor.get_health_status()
        st.info(f"Device: {health_info['device']}")
        st.info(f"Mod√®le: {health_info['model']}")
        
        if st.button("üîÑ R√©initialiser", type="secondary"):
            st.session_state.vad_processor = None
            st.rerun()

# Interface principale
st.header("üéØ Analyse VAD")

# Section d'upload
st.subheader("üìÅ Upload de fichier")
uploaded_file = st.file_uploader(
    "Choisissez un fichier audio ou vid√©o",
    type=['wav', 'mp3', 'mp4', 'mkv', 'avi', 'mov'],
    help="Formats support√©s: WAV, MP3, MP4, MKV, AVI, MOV"
)

# Section d'analyse
if uploaded_file is not None:
    st.subheader("üîç Analyse")
    
    # V√©rifier que le processeur est initialis√©
    if not st.session_state.vad_processor:
        st.warning("‚ö†Ô∏è Le processeur VAD n'est pas initialis√©. Utilisez le bouton dans la sidebar.")
    else:
        # Afficher les informations du fichier
        file_details = {
            "Nom": uploaded_file.name,
            "Type": uploaded_file.type,
            "Taille": f"{uploaded_file.size / 1024 / 1024:.2f} MB"
        }
        
        col1, col2, col3 = st.columns(3)
        for key, value in file_details.items():
            with col1 if key == "Nom" else col2 if key == "Type" else col3:
                st.metric(key, value)
        
        # Bouton d'analyse
        if st.button("üöÄ Lancer l'analyse VAD", type="primary"):
            try:
                with st.spinner("Analyse en cours..."):
                    # Sauvegarder temporairement le fichier
                    with tempfile.NamedTemporaryFile(delete=False, suffix=f".{uploaded_file.name.split('.')[-1]}") as tmp_file:
                        tmp_file.write(uploaded_file.getvalue())
                        tmp_path = tmp_file.name
                    
                    # Lancer l'analyse
                    results = st.session_state.vad_processor.process_audio(tmp_path)
                    
                    # Nettoyer le fichier temporaire
                    os.unlink(tmp_path)
                    
                    if results["success"]:
                        st.success("‚úÖ Analyse termin√©e avec succ√®s!")
                        
                        # Afficher les m√©tadonn√©es
                        metadata = results["metadata"]
                        col1, col2, col3, col4 = st.columns(4)
                        with col1:
                            st.metric("Dur√©e", f"{metadata['duration_s']:.1f}s")
                        with col2:
                            st.metric("Segments", metadata["segments_count"])
                        with col3:
                            st.metric("Temps traitement", f"{metadata['processing_time_s']:.1f}s")
                        with col4:
                            st.metric("RTF", f"{metadata['rtf']:.3f}")
                        
                        # Afficher les segments
                        if results["events"]:
                            st.subheader("üìä Segments d√©tect√©s")
                            segments_data = []
                            for event in results["events"]:
                                segments_data.append({
                                    "D√©but": f"{event['start']:.2f}s",
                                    "Fin": f"{event['end']:.2f}s",
                                    "Dur√©e": f"{event['duration']:.2f}s",
                                    "Confiance": event['confidence'] or "N/A"
                                })
                            
                            st.dataframe(segments_data, use_container_width=True)
                            
                            # T√©l√©chargement des r√©sultats
                            json_str = json.dumps(results, indent=2, ensure_ascii=False)
                            st.download_button(
                                label="üì• T√©l√©charger les r√©sultats JSON",
                                data=json_str,
                                file_name=f"{uploaded_file.name.split('.')[0]}_vad_results.json",
                                mime="application/json"
                            )
                        else:
                            st.warning("‚ö†Ô∏è Aucun segment de parole d√©tect√©")
                            st.info("Essayez d'ajuster les seuils VAD ou v√©rifiez que le fichier contient de la parole")
                    else:
                        st.error(f"‚ùå Erreur lors de l'analyse: {results.get('error', 'Erreur inconnue')}")
                        
            except Exception as e:
                st.error(f"‚ùå Erreur lors de l'analyse: {str(e)}")
                logger.error(f"Erreur analyse: {e}")

# Section de diagnostic
st.header("üîß Diagnostic")
st.subheader("üìã Informations syst√®me")

# Informations de base
col1, col2, col3 = st.columns(3)
with col1:
    st.metric("Python", platform.python_version())
with col2:
    st.metric("OS", platform.system())
with col3:
    st.metric("Architecture", platform.machine())

# V√©rification des pr√©requis
if st.session_state.vad_processor:
    st.subheader("üîç Pr√©requis VAD")
    prerequisites = st.session_state.vad_processor.check_prerequisites()
    
    col1, col2 = st.columns(2)
    with col1:
        st.metric("PyTorch", prerequisites.get("torch_version", "N/A"))
        st.metric("Device", prerequisites.get("device", "N/A"))
    with col2:
        st.metric("TorchAudio", prerequisites.get("torchaudio_version", "N/A"))
        st.metric("FFmpeg", "‚úÖ" if prerequisites.get("ffmpeg_available") else "‚ùå")

# Footer
st.markdown("---")
st.markdown("*Procteo-Audio - Voice Activity Detection avec Pyannote*")
